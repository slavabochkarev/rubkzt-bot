from handlers import globals_store
# –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ get_kursz_data –∏ get_kurskz_rub_buy_sell_avg –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
# –µ—Å–ª–∏ get_kurskz_rub_buy_sell_avg –≤ –¥—Ä—É–≥–æ–º –º–æ–¥—É–ª–µ, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π –µ–≥–æ —è–≤–Ω–æ:
# from some_module import get_kurskz_rub_buy_sell_avg

def try_convert_amount(message: str, data: dict) -> str | None:
    """–ü—Ä–æ–±—É–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ '<amount> <currency>' –∏ —É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ –∫—É—Ä—Å –¶–ë –†–§."""
    try:
        print("[DEBUG] start try_convert_amount, message:", message)
        parts = message.strip().lower().split()
        if len(parts) != 2:
            print("[DEBUG] parts len != 2 -> None")
            return None

        amount_str, currency_code = parts
        try:
            amount = float(amount_str.replace(",", "."))
        except Exception as e:
            print("[DEBUG] invalid amount:", amount_str, "error:", e)
            return None

        currency_code = currency_code.upper()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–∞–ª—é—Ç—ã
        if currency_code not in data.get("Valute", {}) and currency_code not in ("KZT", "KZ", "–ö–ó", "–õ–Ø"):
            print(f"[DEBUG] currency {currency_code} not found in data")
            return f"‚ùå –í–∞–ª—é—Ç–∞ '{currency_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –¶–ë –†–§."

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç KZT ‚Äî –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∫ "–æ–±—Ä–∞—Ç–Ω—ã–π –∫—É—Ä—Å"
        if currency_code in ("KZT", "KZ", "–ö–ó", "–õ–Ø"):
            print("[DEBUG] enter KZT-branch")
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—É—Ä—Å (–∏–∑ globals_store —á–µ—Ä–µ–∑ get_kursz_data)
            try:
                local_rate = get_kursz_data()
            except Exception as e:
                print("[DEBUG] get_kursz_data() raised:", e)
                local_rate = None

            # –ï—Å–ª–∏ local_rate –Ω–µ—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å globals_store (—Ñ–æ–ª–ª–±—ç–∫)
            if local_rate is None:
                print("[DEBUG] local_rate is None -> trying fallback update via get_kurskz_rub_buy_sell_avg()")
                try:
                    # –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è get_kurskz_rub_buy_sell_avg –≤ —Å–∫–æ—É–ø–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
                    data_fallback = get_kurskz_rub_buy_sell_avg()
                    if data_fallback and "avg_sell" in data_fallback:
                        try:
                            globals_store.avg_sell_global = float(data_fallback["avg_sell"])
                            print("[DEBUG] fallback assigned globals_store.avg_sell_global =", globals_store.avg_sell_global)
                        except Exception as e:
                            print("[ERROR] cannot convert fallback avg_sell to float:", e)
                            globals_store.avg_sell_global = None
                    else:
                        print("[DEBUG] fallback returned no data or no avg_sell")
                except NameError:
                    # —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–π —Å–∫–æ—É–ø–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    print("[DEBUG] get_kurskz_rub_buy_sell_avg() not available (NameError)")
                except Exception as e:
                    print("[ERROR] fallback get_kurskz_rub_buy_sell_avg() raised:", e)

                # –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–∑—è—Ç—å –∫—É—Ä—Å –∏–∑ globals_store
                try:
                    local_rate = get_kursz_data()
                except Exception as e:
                    print("[DEBUG] second get_kursz_data() raised:", e)
                    local_rate = None

            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —á–∏—Å–ª—É
            try:
                local_rate_num = float(local_rate) if local_rate is not None else None
            except Exception as e:
                print("[DEBUG] float(local_rate) failed:", repr(local_rate), "err:", e)
                local_rate_num = None

            # –û—Ç–ª–∞–¥–∫–∞: –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥
            print(f"[DEBUG] local_rate={local_rate!r}, local_rate_num={local_rate_num!r}")
            print("[DEBUG] globals_store info:", getattr(globals_store, "__file__", None), "id=", id(globals_store))

            # –ë–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –¶–ë –ø–æ KZT; –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º
            kzt_valute = data.get("Valute", {}).get("KZT")
            if not kzt_valute:
                print("[DEBUG] data has no Valute['KZT']")
                if local_rate_num is not None and local_rate_num > 0:
                    converted_local = round(amount / local_rate_num, 2)
                    line_local = f"üîÅ –ü–æ –æ–±–º–µ–Ω–Ω–æ–º—É –∫—É—Ä—Å—É {amount} KZT / {local_rate_num:.4f} = {converted_local} RUB"
                    return line_local
                return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ KZT –≤ –¥–∞–Ω–Ω—ã—Ö –¶–ë –†–§ –∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

            nominal = kzt_valute["Nominal"]
            value = kzt_valute["Value"]
            rub_per_1_kzt = value / nominal
            kzt_per_1_rub = 1 / rub_per_1_kzt
            currency_code = "KZT"

            converted_cb = round(amount / kzt_per_1_rub, 2)
            line_cb = f"üí∞ –ü–æ –∫—É—Ä—Å—É –¶–ë {amount} {currency_code} / {kzt_per_1_rub:.4f} = {converted_cb} RUB"

            if local_rate_num is not None and local_rate_num > 0:
                converted_local = round(amount / local_rate_num, 2)
                line_local = f"üîÅ –ü–æ –æ–±–º–µ–Ω–Ω–æ–º—É –∫—É—Ä—Å—É {amount} {currency_code} / {local_rate_num:.4f} = {converted_local} RUB"
                print("[DEBUG] returning CB + local")
                return f"{line_cb}\n{line_local}"
            else:
                print("[DEBUG] returning CB only")
                return line_cb

        # –û–±—â–∏–π —Å–ª—É—á–∞–π –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–∞–ª—é—Ç
        valute = data["Valute"][currency_code]
        nominal = valute["Nominal"]
        value = valute["Value"]
        rate = value / nominal
        converted = round(amount * rate, 2)
        print("[DEBUG] returning general conversion")
        return f"üí∞ {amount} {currency_code} √ó {rate:.4f} = {converted} RUB"

    except Exception as e:
        # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É (–ø–æ—Ç–æ–º –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)
        print("[ERROR] Exception in try_convert_amount:", e)
        return None
