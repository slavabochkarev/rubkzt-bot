import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
import datetime
from telegram import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove 
from bs4 import BeautifulSoup
import re
import json
import asyncio
import nest_asyncio
import xml.etree.ElementTree as ET
from telegram import BotCommand, MenuButtonCommands
from dotenv import load_dotenv
import os
from flask import Flask
import threading
from supabase_utils import save_user_info, save_location, save_action

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à
cached_data = None
avg_sell_global = None
last_updated = None
ADMIN_CHAT_ID = None
CACHE_TTL = datetime.timedelta(hours=1)  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞: 1 —á–∞—Å

def try_convert_amount(message: str, data: dict) -> str | None:
    """–ü—Ä–æ–±—É–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ '<amount> <currency1> [currency2]' –∏ —É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ –∫—É—Ä—Å –¶–ë –†–§."""    
    try:
        print("[DEBUG] start try_convert_amount, message:", message)
        parts = message.strip().lower().split()

        if len(parts) == 1:
            amount_str = parts[0]
            currency_from = "KZT"
            currency_to = None
        elif len(parts) == 2:
            amount_str, currency_from = parts
            currency_to = None
        elif len(parts) == 3:
            amount_str, currency_from, currency_to = parts
        else:
            return None

        # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—É–º–º—É
        try:
            amount = float(amount_str.replace(",", "."))
        except Exception as e:
            print("[DEBUG] invalid amount:", amount_str, "error:", e)
            return None

        currency_from = currency_from.upper()
        currency_to = currency_to.upper() if currency_to else None

        # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: —Ü–µ–ø–æ—á–∫–∞ —á–µ—Ä–µ–∑ —Ä—É–±–ª–∏ ---
        if currency_to:
            # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ–±–µ –≤–∞–ª—é—Ç—ã –µ—Å—Ç—å
            if currency_from not in data.get("Valute", {}) and currency_from not in ("KZT", "KZ", "–ö–ó", "–õ–Ø"):
                return f"‚ùå –í–∞–ª—é—Ç–∞ '{currency_from}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            if currency_to not in data.get("Valute", {}) and currency_to not in ("KZT", "KZ", "–ö–ó", "–õ–Ø"):
                return f"‚ùå –í–∞–ª—é—Ç–∞ '{currency_to}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

            # —à–∞–≥ 1: currency_from -> RUB
            if currency_from in ("KZT", "KZ", "–ö–ó", "–õ–Ø"):
                kzt_valute = data["Valute"]["KZT"]
                rate_from = kzt_valute["Value"] / kzt_valute["Nominal"]
                amount_rub = amount * rate_from
            else:
                valute_from = data["Valute"][currency_from]
                rate_from = valute_from["Value"] / valute_from["Nominal"]
                amount_rub = amount * rate_from

            # —à–∞–≥ 2: RUB -> currency_to
            if currency_to in ("KZT", "KZ", "–ö–ó", "–õ–Ø"):
                kzt_valute = data["Valute"]["KZT"]
                rate_to = kzt_valute["Value"] / kzt_valute["Nominal"]
                amount_final = amount_rub / rate_to
            else:
                valute_to = data["Valute"][currency_to]
                rate_to = valute_to["Value"] / valute_to["Nominal"]
                amount_final = amount_rub / rate_to

            return f"üí± {amount} {currency_from} ‚Üí {amount_final:.2f} {currency_to} (—á–µ—Ä–µ–∑ {amount_rub:.2f} RUB)"

        # --- –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ (2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞) ---
        if currency_from in ("KZT", "KZ", "–ö–ó", "–õ–Ø"):
            try:
                local_rate = get_kursz_data()
            except Exception as e:
                print("[DEBUG] get_kursz_data() raised:", e)
                local_rate = None

															 
            try:
                local_rate_num = float(local_rate) if local_rate is not None else None
            except Exception as e:
                print("[DEBUG] float(local_rate) failed:", repr(local_rate), "err:", e)
                local_rate_num = None

																													 
            kzt_valute = data.get("Valute", {}).get("KZT")
            lines = []

            if kzt_valute:
                nominal = kzt_valute["Nominal"]
                value = kzt_valute["Value"]
                rub_per_1_kzt = value / nominal
                kzt_per_1_rub = 1 / rub_per_1_kzt

                converted_cb = round(amount / kzt_per_1_rub, 2)
																													
                lines.append(f"–ü–æ –∫—É—Ä—Å—É –¶–ë –†–§: {converted_cb} ({kzt_per_1_rub:.4f})")
            else:
                print("[DEBUG] data has no Valute['KZT']")

																													 
            if local_rate_num is not None and local_rate_num > 0:
                converted_local = round(amount / local_rate_num, 2)
															 
                lines.append(f"–ü–æ –æ–±–º–µ–Ω –∫—É—Ä—Å—É: {converted_local} ({local_rate_num:.4f})")                
                diff = converted_cb - converted_local
                lines.append(f"–†–∞–∑–Ω–∏—Ü–∞: <b>{diff:.2f}</b>\n")
                
            if lines:
																											  
                return "\n".join(lines)
							 
            else:
                return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ KZT –≤ –¥–∞–Ω–Ω—ã—Ö –¶–ë –†–§ –∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

																
        valute = data["Valute"][currency_from]
        nominal = valute["Nominal"]
        value = valute["Value"]
        rate = value / nominal
        converted = round(amount * rate, 2)
        return f"üí∞ {amount} {currency_from} √ó {rate:.4f} = {converted} RUB"

    except Exception as e:
        print("[ERROR] Exception in try_convert_amount:", e)
        return None

#—Ç—É—Ç —Ç–æ–ª—å–∫–æ —Ä—É–±–ª–∏
def get_nbrk_rub():
    url = "https://nationalbank.kz/rss/rates_all.xml"
    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()

        root = ET.fromstring(response.content)

        for item in root.findall(".//item"):
            title = item.find("title").text
            if title == "RUB":
                rate = item.find("description").text
                date = item.find("pubDate").text 
                return {
                        "rate": float(rate.replace(",", ".")),
                        "date": date
                }
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –∏–∑ –ù–ë–†–ö: {e}")
        return None        


def get_nbrk_course():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å —Å–∞–π—Ç–∞ –ù–ë–†–ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è, 
    –ø–æ—Ö–æ–∂–µ–≥–æ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç daily_json.js –æ—Ç –¶–ë –†–§.
    """
    url = "https://nationalbank.kz/rss/rates_all.xml"
    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        root = ET.fromstring(response.content)

        valutes = {}

        for item in root.findall(".//item"):
            code = item.find("title").text.strip().upper()
            rate_str = item.find("description").text.strip()
            nominal_str = item.find("quant").text.strip() if item.find("quant") is not None else "1"

            try:
                rate = float(rate_str.replace(",", "."))
                nominal = int(nominal_str)
            except ValueError:
                continue

            valutes[code] = {
                "CharCode": code,
                "Nominal": nominal,
                "Value": rate
            }

        return {
            "Date": root.find(".//pubDate").text if root.find(".//pubDate") is not None else None,
            "Valute": valutes
        }

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –∏–∑ –ù–ë–†–ö: {e}")
        return None

def get_kurskz_rub_buy_sell_avg():
    kurs_list = get_kurskz_rub_buy_sell_all()
    
    if not kurs_list:
        return None

    total_buy = sum(k["buy"] for k in kurs_list)
    total_sell = sum(k["sell"] for k in kurs_list)
    count = len(kurs_list)

    avg_buy = total_buy / count if count else 0
    avg_sell = total_sell / count if count else 0

    return {
        "avg_buy": avg_buy,
        "avg_sell": avg_sell,
        "count": count
    }

def get_kurskz_rub_buy_sell_avg_almaty():
    kurs_list = get_kurskz_rub_buy_sell_almaty()
    
    if not kurs_list:
        return None

    total_buy = sum(k["buy"] for k in kurs_list)
    total_sell = sum(k["sell"] for k in kurs_list)
    count = len(kurs_list)

    avg_buy = total_buy / count if count else 0
    avg_sell = total_sell / count if count else 0

    return {
        "avg_buy": avg_buy,
        "avg_sell": avg_sell,
        "count": count
    }


def get_kurskz_rub_buy_sell_all():
    url = "https://kurs.kz/site/index?city=uralsk"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0 Safari/537.36"
    }

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()

        match = re.search(r"var punkts = (\[.*?\]);", response.text, re.DOTALL)
        if not match:
            return []

        punkts_json = match.group(1)
        punkts = json.loads(punkts_json)

        result = []
        for punkt in punkts:
            rub = punkt.get("data", {}).get("RUB")
            if rub and isinstance(rub, list) and len(rub) >= 2 and rub[0] > 0 and rub[1] > 0:
                result.append({
                    "name": punkt.get("name", "‚Äî"),
                    "address": punkt.get("mainaddress", "‚Äî"),
                    "buy": rub[0],
                    "sell": rub[1],
                })

        return result

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å kurs.kz:", e)
        return []
        
def get_kurskz_rub_buy_sell_almaty():
    url = "https://kurs.kz/site/index?city=almaty"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0 Safari/537.36"
    }

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()

        match = re.search(r"var punkts = (\[.*?\]);", response.text, re.DOTALL)
        if not match:
            return []

        punkts = json.loads(match.group(1))

        result = []
        for punkt in punkts:
            name = punkt.get("name", "")
            rub = punkt.get("data", {}).get("RUB")
            name_lc = name.lower()
            if (
                ("exchange" in name_lc or name_lc == "–º–∏–≥ 1")
                and rub and isinstance(rub, list)
                and len(rub) >= 2 and rub[0] > 0 and rub[1] > 0
            ):
                result.append({
                    "name": name,
                    "address": punkt.get("mainaddress", "‚Äî"),
                    "buy": rub[0],
                    "sell": rub[1],
                })
        return result

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å kurs.kz:", e)
        return []
        
def get_flag(code):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏-—Ñ–ª–∞–≥ –ø–æ –∫–æ–¥—É —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä 'US' ‚Üí üá∫üá∏)."""
    if code == "EU":
        return "üá™üá∫"  # –ï–≤—Ä–æ—Å–æ—é–∑ –Ω–µ –∏–º–µ–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–ª–∞–≥–∞-—ç–º–æ–¥–∑–∏, —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç
    return ''.join([chr(ord(c) + 127397) for c in code.upper()])
    
    
# üíµ –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞
async def usd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = get_currency_data()
    if data:
        rate = data["Valute"]["USD"]["Value"]
        flag = get_flag("US")
        await update.message.reply_text(f"{flag} –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –ø–æ –¥–∞–Ω–Ω—ã–º –¶–ë –†–§: 1 USD = {rate:.2f} RUB")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –¶–ë.")

# üí∂ –ö—É—Ä—Å –µ–≤—Ä–æ
async def eur(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = get_currency_data()
    if data:
        rate = data["Valute"]["EUR"]["Value"]
        flag = get_flag("EU")
        await update.message.reply_text(f"{flag} –ö—É—Ä—Å –µ–≤—Ä–æ –ø–æ –¥–∞–Ω–Ω—ã–º –¶–ë –†–§: 1 EUR = {rate:.2f} RUB")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –¶–ë.")
        
# üí∂ –ö—É—Ä—Å —Ç–µ–Ω–≥–µ
async def kzt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = get_currency_data()
    if data:
        valute = data["Valute"]["KZT"]
        nominal = valute["Nominal"]
        value = valute["Value"]

        rub_per_1_kzt = value / nominal
        kzt_per_1_rub = 1 / rub_per_1_kzt
        flag = get_flag("KZ")

        await update.message.reply_text(
            f"{flag} –ö—É—Ä—Å —Ç–µ–Ω–≥–µ:\n"
            f"1 KZT = {rub_per_1_kzt:.4f} RUB\n"
            f"1 RUB = {kzt_per_1_rub:.2f} KZT"
        )
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –¶–ë.")

        
# üìä –û–±—â–µ–µ ‚Äî –¶–ë –†–§ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã
async def course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = get_currency_data()
    if data:
        usd_rate = data["Valute"]["USD"]["Value"]
        eur_rate = data["Valute"]["EUR"]["Value"]       
        
        by_rate = data["Valute"]["BYN"]["Value"]
        kzt_rate = 1 / (data["Valute"]["KZT"]["Value"] / data["Valute"]["KZT"]["Nominal"])
        som_rate = 1 / (data["Valute"]["KGS"]["Value"] / data["Valute"]["KGS"]["Nominal"])
        date_rf = last_updated.strftime('%d.%m.%Y')
        msg = (
            f"–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –ø–æ –¥–∞–Ω–Ω—ã–º –¶–ë –†–§ –Ω–∞ {date_rf}:\n"
            f"üíµ 1 RUB = {kzt_rate:.2f} KZT\n"
            f"üíµ 1 RUB = {som_rate:.2f} KGS\n"
            f"üíµ 1 BYN = {by_rate:.2f} RUB\n"
            f"üíµ 1 USD = {usd_rate:.2f} RUB\n"
            f"üí∂ 1 EUR = {eur_rate:.2f} RUB"
        )
        await update.message.reply_text(msg)
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –¶–ë –†–§.")


# üìä –û–±—â–µ–µ ‚Äî –ù–ë –ö–ó –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã
async def coursekz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = get_nbrk_course()
    if data:
        usd_rate = data["Valute"]["USD"]["Value"]
        eur_rate = data["Valute"]["EUR"]["Value"]       
        
        by_rate = data["Valute"]["BYN"]["Value"]
        rub_rate = data["Valute"]["RUB"]["Value"] 
        som_rate = data["Valute"]["KGS"]["Value"] 
        date_rk = data["Date"]
        msg = (
            f"–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –ø–æ –¥–∞–Ω–Ω—ã–º –ù–ë –ö–ó –Ω–∞ {date_rk}:\n"
            f"üíµ 1 RUB = {rub_rate:.2f} KZT\n"
            f"üíµ 1 KGS = {som_rate:.2f} KZT\n"
            f"üíµ 1 BYN = {by_rate:.2f} KZT\n"
            f"üíµ 1 USD = {usd_rate:.2f} KZT\n"
            f"üí∂ 1 EUR = {eur_rate:.2f} KZT"
        )
        await update.message.reply_text(msg)
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –ù–ë –†–ö.")


# üìä –û–±—â–µ–µ –æ—Ç –¶–ë
async def course_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dataRF = get_currency_data()
    dataKZ = get_nbrk_rub()

    if dataRF and dataKZ:
        rub_rf = dataRF["Valute"]["KZT"]["Value"] / dataRF["Valute"]["KZT"]["Nominal"]
        rub_kz = dataKZ["rate"]
        date_kz = dataKZ["date"]
        date_rf = last_updated.strftime('%d.%m.%Y')

        msg = (
            f"üìÖ –î–∞—Ç–∞: {date_kz}\n\n"
            f"üá∑üá∫ –¶–ë –†–§: 1 RUB = {1/rub_rf:.2f} KZT\n"
            f"üá∞üáø –ù–ë –†–ö: 1 RUB = {rub_kz:.2f} KZT"
        )
        await update.message.reply_text(msg)
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –¶–ë –∏–ª–∏ –ù–ë–†–ö.")
        
# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global ADMIN_CHAT_ID
    
    print("üîî –ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞")
    user = update.effective_user
    save_user_info(user)
    save_action(user.id, "/start")
    
    ADMIN_CHAT_ID = update.effective_chat.id

    keyboard = [
        [KeyboardButton("üìä –ö—É—Ä—Å—ã RUB/KZT"), KeyboardButton("–û–±–º–µ–Ω–Ω–∏–∫–∏ –£—Ä–∞–ª—å—Å–∫–∞"), KeyboardButton("–û–±–º–µ–Ω–Ω–∏–∫–∏ –ê–ª–º–∞—Ç—ã")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await asyncio.sleep(0.5)  # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∫—É—Ä—Å–∞–º–∏ RUB/KZT.\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É.",
        reply_markup=reply_markup
    )

async def rub_kzt_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await course_cb(update, context)
    await kurskz(update, context)
    await kurskz_almaty(update, context)  
    
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message = update.message.text
    save_action(user.id, f"{message}")       
    text = message.lower()

    if "–æ–±–º–µ–Ω–Ω–∏–∫–∏ —É—Ä–∞–ª—å—Å–∫–∞" in text:
        await kurskz_oral(update, context)
    elif "–æ–±–º–µ–Ω–Ω–∏–∫–∏ –∞–ª–º–∞—Ç—ã" in text:
        await kurskz_detail_almaty(update, context)
    elif "üìä –∫—É—Ä—Å—ã rub/kzt" in text:
        await rub_kzt_all(update, context)
    else:
        data = get_currency_data()
        if data:
            result = try_convert_amount(update.message.text, data)
            if result:
                await update.message.reply_text(result, parse_mode="HTML")
                return
        await update.message.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.")

async def kurskz_oral(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kurs_list = get_kurskz_rub_buy_sell_all()
    if kurs_list:
         messages = []
         for kurs in kurs_list:
             messages.append(
                 f"üè¶ <b>{kurs['name']}</b>\n"
                 f"üìç {kurs['address']}\n"
                 f"üîª –ü–æ–∫—É–ø–∫–∞: {kurs['buy']} ‚Ç∏\n"
                 f"üî∫ –ü—Ä–æ–¥–∞–∂–∞: {kurs['sell']} ‚Ç∏\n"
                 f"‚Äî ‚Äî ‚Äî\n"
             )
         full_message = "\n".join(messages)
         await update.message.reply_text(full_message, parse_mode="HTML")
    else:
         await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±–º–µ–Ω–Ω–∏–∫–∞—Ö.")
         
async def kurskz_detail_almaty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kurs_list = get_kurskz_rub_buy_sell_almaty()

    if not kurs_list:
        await update.message.reply_text("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö.")
        return

    MAX_LENGTH = 4000
    result_text = ""

    for k in kurs_list:
        entry = (
            f"üè¶ {k['name']}\n"
            f"üìç {k['address']}\n"
            f"{k['buy']} / {k['sell']}\n"
            f"‚Äî ‚Äî ‚Äî\n"
        )
        if len(result_text) + len(entry) > MAX_LENGTH:
            break
        result_text += entry

    await update.message.reply_text(result_text)
         
async def kurskz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global avg_sell_global
    data = get_kurskz_rub_buy_sell_avg()
    if not data:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±–º–µ–Ω–Ω–∏–∫–∞—Ö.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    try:
        avg_sell_global = float(data['avg_sell'])
        print(f"[DEBUG] kurskz handler assigned avg_sell_global = {avg_sell_global}")
    except Exception as e:
        print("[ERROR] kurskz: cannot convert avg_sell:", e)
        avg_sell_global = None

    message = (
        f"üìä <b>–°—Ä–µ–¥–Ω–∏–π –∫—É—Ä—Å RUB –ø–æ {data['count']} –æ–±–º–µ–Ω–Ω–∏–∫–∞–º –£—Ä–∞–ª—å—Å–∫–∞:</b>\n"
        f"üí∞ –ü–æ–∫—É–ø–∫–∞: <b>{data['avg_buy']:.2f}</b> ‚Ç∏\n"
        f"üíµ –ü—Ä–æ–¥–∞–∂–∞: <b>{data['avg_sell']:.2f}</b> ‚Ç∏"
    )
    await update.message.reply_text(message, parse_mode="HTML")

async def kurskz_almaty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = get_kurskz_rub_buy_sell_avg_almaty()
    if not data:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±–º–µ–Ω–Ω–∏–∫–∞—Ö.")
        return

    message = (
        f"üìä <b>–°—Ä–µ–¥–Ω–∏–π –∫—É—Ä—Å RUB –ø–æ {data['count']} –æ–±–º–µ–Ω–Ω–∏–∫–∞–º –ê–ª–º–∞—Ç—ã:</b>\n"
        f"üí∞ –ü–æ–∫—É–ø–∫–∞: <b>{data['avg_buy']:.2f}</b> ‚Ç∏\n"
        f"üíµ –ü—Ä–æ–¥–∞–∂–∞: <b>{data['avg_sell']:.2f}</b> ‚Ç∏"
    )
    await update.message.reply_text(message, parse_mode="HTML")
    
async def rub_nbrk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = get_nbrk_rub()
    if data:
        await update.message.reply_text(
        f"üá∑üá∫ –ö—É—Ä—Å —Ä—É–±–ª—è –Ω–∞ {data['date']} –ø–æ –ù–ë–†–ö:\n"
        f"1 RUB = {data['rate']:.2f} ‚Ç∏\n"
    )
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å —Ä—É–±–ª—è –æ—Ç –ù–ë–†–ö.")    

# üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ –æ–¥–∏–Ω —Ä–∞–∑
def get_currency_data():
    return cached_data

def get_kursz_data():
    return avg_sell_global

# üîÑ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞ –∫—É—Ä—Å–æ–≤
def update_currency_data(context: ContextTypes.DEFAULT_TYPE):
    global cached_data, last_updated, avg_sell_global, ADMIN_CHAT_ID
    try:
        response = requests.get("https://www.cbr-xml-daily.ru/daily_json.js", timeout=10)
        response.raise_for_status()
        cached_data = response.json()
        last_updated = datetime.datetime.now()
        print(f"üîÅ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Å–µ—Ç–∏: {last_updated}")
        
        if ADMIN_CHAT_ID:
            context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"üì¢ –ö—É—Ä—Å –∏–∑–º–µ–Ω–∏–ª—Å—è! {last_updated}"
            )
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞:", e)

    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ (kurs.kz)
    try:
        kurs_data = get_kurskz_rub_buy_sell_avg()  # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è
        if kurs_data and "avg_sell" in kurs_data:
            try:
                avg_sell_global = float(kurs_data['avg_sell'])  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: kurs_data
                print(f"üîÅ avg_sell_global –æ–±–Ω–æ–≤–ª—ë–Ω: {avg_sell_global}")
            except Exception as e:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤–µ—Å—Ç–∏ avg_sell –∫ float:", e)
                avg_sell_global = None
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å avg_sell –∏–∑ kurs.kz (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç).")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å kurs.kz:", e)
        
async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–î–∞–Ω–Ω—ã–µ –¶–ë –†–§ —Å www.cbr-xml-daily.ru \n"
        f"–î–∞–Ω–Ω—ã–µ –ù–ë –†–ö —Å nationalbank.kz \n"
        f"–ò –¥–∞–Ω–Ω—ã–µ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ kurs.kz\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–æ–¥ –≤–∞–ª—é—Ç—ã (–∏–ª–∏ –¥–≤–∞ –∫–æ–¥–∞ ) ‚Äî –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–µ—Å—á—ë—Ç –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É –¶–ë –†–§ (–ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ —Ä—É–±–ª–∏)\n"
        f"–ü—Ä–∏–º–µ—Ä—ã: '1000 KZT KGS' –∏–ª–∏ '1000 BYN' –∏–ª–∏ '1000'\n"
        f"–¢—Ä–µ—Ç–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é RUB, –≤—Ç–æ—Ä–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é KZT\n\n"
        f"üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ‚Äî @SlavaBochkarev\n")
    #await update.message.reply_text(ADMIN_CHAT_ID, parse_mode="HTML")      

async def setup_bot_commands(application):
    await application.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("help", "–û–ø–∏—Å–∞–Ω–∏–µ"),
        BotCommand("kurs", "–ö—É—Ä—Å—ã –¶–ë/–ù–ë –∏ —Å—Ä–µ–¥–Ω–∏–µ –ø–æ –æ–±–º–µ–Ω–Ω–∏–∫–∞–º"),
        BotCommand("course", "–ö—É—Ä—Å –≤–∞–ª—é—Ç –¶–ë –†–§"),
        BotCommand("coursekz", "–ö—É—Ä—Å –≤–∞–ª—é—Ç –ù–ë –ö–ó"),
        BotCommand("kurs_oral", "–û–±–º–µ–Ω–Ω–∏–∫–∏ –£—Ä–∞–ª—å—Å–∫–∞"),
        BotCommand("kurs_almaty", "–û–±–º–µ–Ω–Ω–∏–∫–∏ –ê–ª–º–∞—Ç—ã")
        # –î–æ–±–∞–≤—å —Å–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã
    ])

    await application.bot.set_chat_menu_button(
        menu_button=MenuButtonCommands()
    )       
    
# üïí –ó–∞–¥–∞—á–∞ –¥–ª—è JobQueue
async def update_currency_data_job(context: ContextTypes.DEFAULT_TYPE):
    update_currency_data(context)
    
# URL –¥–ª—è –∞–≤—Ç–æ–ø–∏–Ω–≥–∞ ‚Äî –ª—É—á—à–µ –∑–∞–¥–∞—Ç—å –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Render (PING_URL),
# –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç.
PING_URL = os.environ.get("PING_URL", "https://rubkzt-bot.onrender.com/")

async def ping_self(context: "ContextTypes.DEFAULT_TYPE"):
    """–ü—ã—Ç–∞–µ–º—Å—è –ø–∏–Ω–≥–æ–≤–∞—Ç—å —Å–∞–º —Å–∞–π—Ç, —á—Ç–æ–±—ã Render –Ω–µ –∑–∞—Å—ã–ø–∞–ª (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ JobQueue)."""
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º blocking-–∑–∞–ø—Ä–æ—Å –≤ ThreadPool, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å loop
        await asyncio.to_thread(requests.get, PING_URL, {"timeout": 10})
        # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å:
        # print(f"Pinged {PING_URL}")
    except Exception as e:
        # –ù–µ –ø–∞–¥–∞–µ–º –Ω–∞ –æ—à–∏–±–∫–∞—Ö –ø–∏–Ω–≥–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
        print("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–∏–Ω–≥–∞:", e)        
    
async def post_init(application):
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

# üëá —Å–æ–∑–¥–∞—ë–º —Ñ–µ–π–∫–æ–≤—ã–π Flask-—Å–µ—Ä–≤–µ—Ä
flask_app = Flask(__name__)

@flask_app.route('/')
def index():
    return "ü§ñ Telegram bot is running"

def run_flask():
    port = int(os.environ.get("PORT", 10000))
    flask_app.run(host="0.0.0.0", port=port)
    
async def main():
    update_currency_data()

    load_dotenv()
    TOKEN = os.getenv("TOKEN")
    if not TOKEN:
        raise ValueError("TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    app = ApplicationBuilder().token(TOKEN).build()

    await setup_bot_commands(app)

    # üëá –•–µ–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("usd", usd))
    app.add_handler(CommandHandler("eur", eur))
    app.add_handler(CommandHandler("kzt", kzt))
    app.add_handler(CommandHandler("help", help))
    app.add_handler(CommandHandler("kurs", rub_kzt_all))
    app.add_handler(CommandHandler("course", course))
    app.add_handler(CommandHandler("coursekz", coursekz))
    app.add_handler(CommandHandler("kurskz", kurskz))
    app.add_handler(CommandHandler("kurs_oral", kurskz_oral))
    app.add_handler(CommandHandler("kurs_almaty", kurskz_detail_almaty))
    app.add_handler(CommandHandler("nbrk", rub_nbrk))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # üïí –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
    app.job_queue.run_repeating(update_currency_data_job, interval=3600, first=0)
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    # üîî –ê–≤—Ç–æ–ø–∏–Ω–≥ —Å–∞–π—Ç–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã Render –Ω–µ –∑–∞—Å—ã–ø–∞–ª
    # –ø–µ—Ä–≤—ã–π –ø–∏–Ω–≥ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ (—á—Ç–æ–±—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ–ª –ø–æ–¥–Ω—è—Ç—å—Å—è)
    app.job_queue.run_repeating(ping_self, interval=600, first=60)
    
    await app.run_polling()

if __name__ == "__main__":
    nest_asyncio.apply()    
    # –§–µ–π–∫–æ–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
    threading.Thread(target=run_flask).start()
    try:
        asyncio.run(main())
    except RuntimeError as e:
        if "cannot close a running event loop" not in str(e).lower():
            raise
